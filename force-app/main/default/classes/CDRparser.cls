//
// Generated by CDRparser http://CDRparser.herokuapp.com/
//

public class CDRparser {

public String calldate {get; set;}
public String src {get; set;}
public String dst {get; set;}
public String duration {get; set;}
public String uniqueid {get; set;}
public String recordingfile {get; set;}
public String xdispo {get; set;}
public String recordingurl {get; set;}
public String direction {get; set;}
public String formattedDuration {get; set;}

public CDRparser(JSONParser parser) {
	while (parser.nextToken() != System.JSONToken.END_OBJECT) {
		if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
			String text = parser.getText();
			if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
				if (text == 'calldate') {
					calldate = parser.getText();
				} else if (text == 'src') {
					src = parser.getText();
				} else if (text == 'dst') {
					dst = parser.getText();
				} else if (text == 'duration') {
					duration = parser.getText();
				} else if (text == 'uniqueid') {
					uniqueid = parser.getText();
				} else if (text == 'recordingfile') {
					recordingfile = parser.getText();
				} else if (text == 'xdispo') {
					xdispo = parser.getText();
				} else if (text == 'recordingurl') {
					recordingurl = parser.getText();
				} else if (text == 'direction') {
					direction = parser.getText();
				}  else if (text == 'fduration') {
					formattedDuration = parser.getText();
				} else {
					System.debug(LoggingLevel.WARN, 'CDRparser consuming unrecognized property: '+text);
					consumeObject(parser);
				}
			}
		}
	}
}


public static List<CDRparser> parse(String json) {
	System.JSONParser parser = System.JSON.createParser(json);
	return arrayOfCDRparser(parser);
}

public static void consumeObject(System.JSONParser parser) {
	Integer depth = 0;
	do {
		System.JSONToken curr = parser.getCurrentToken();
		if (curr == System.JSONToken.START_OBJECT ||
		    curr == System.JSONToken.START_ARRAY) {
			depth++;
		} else if (curr == System.JSONToken.END_OBJECT ||
		           curr == System.JSONToken.END_ARRAY) {
			depth--;
		}
	} while (depth > 0 && parser.nextToken() != null);
}


private static List<CDRparser> arrayOfCDRparser(System.JSONParser p) {
	List<CDRparser> res = new List<CDRparser>();
	if (p.getCurrentToken() == null) p.nextToken();
	while (p.nextToken() != System.JSONToken.END_ARRAY) {
		res.add(new CDRparser(p));
	}
	return res;
}



}